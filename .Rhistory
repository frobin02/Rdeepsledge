library(ggplot2)
library(kableExtra)
library(knitr)
exemple <- load(file_path)
knitr::opts_chunk$set(echo = TRUE, fig.align="center",warning = FALSE,message = FALSE,error = TRUE)
file_path <- system.file("MPO_REFUGE_source.Rdata", package = "Rdeepsledge")
library(ggplot2)
library(kableExtra)
library(knitr)
exemple <- load(file_path)
knitr::opts_chunk$set(echo = TRUE, fig.align="center",warning = FALSE,message = FALSE,error = TRUE)
file_path <- system.file("MPO_REFUGE_source.Rdata", package = "Rdeepsledge")
library(ggplot2)
library(kableExtra)
library(knitr)
exemple <- load(file_path)
file_path <- system.file("MPO_REFUGE_source.Rdata", package = "Rdeepsledge")
file_path
load(file_path)
MPO_REFUGE_source.Rdata
knitr::opts_chunk$set(echo = TRUE, fig.align="center",warning = FALSE,message = FALSE,error = TRUE)
file_path <- system.file("MPO_REFUGE_source.Rdata", package = "Rdeepsledge")
library(ggplot2)
library(kableExtra)
library(knitr)
exemple <- load(file_path)
exemple <- load(MPO_REFUGE_source.Rdata)
knitr::opts_chunk$set(echo = TRUE, fig.align="center",warning = FALSE,message = FALSE,error = TRUE)
file_path <- system.file("MPO_REFUGE_source.Rdata", package = "Rdeepsledge")
library(ggplot2)
library(kableExtra)
library(knitr)
# exemple <- load(file_path)
exemple <- load(MPO_REFUGE_source.Rdata)
devtools::document()
devtools::check()
devtools::build()
devtools::install()
library(Rdeepsledge)
knitr::opts_chunk$set(echo = TRUE, fig.align="center",warning = FALSE,message = FALSE,error = TRUE)
file_path <- system.file("MPO_REFUGE_source.Rdata", package = "Rdeepsledge")
library(ggplot2)
library(kableExtra)
library(knitr)
exemple <- load(file_path)
library(Rdeepsledge)
knitr::opts_chunk$set(echo = TRUE, fig.align="center",warning = FALSE,message = FALSE,error = TRUE)
file_path <- system.file("MPO_REFUGE_source.Rdata", package = "Rdeepsledge")
library(ggplot2)
library(kableExtra)
library(knitr)
exemple <- load(file_path)
# exemple <- load(MPO_REFUGE_source.Rdata)
file_path <- system.file("MPO_REFUGE_source.Rdata", package = "Rdeepsledge")
exemple <- load(file_path)
# exemple <- load(MPO_REFUGE_source.Rdata)
file_path <- system.file("MPO_REFUGE_source.Rdata", package = "Rdeepsledge")
exemple <- load(file_path)
# exemple <- load(MPO_REFUGE_source.Rdata)
Error in `load()`:
setwd("~/PROJET/PACKAGE_DEEPS_GIT/Rdeepsledge/inst")
dat <- load("MPO_REFUGE_source.RData")
dat <- load("MPO_REFUGE_source.Rdata")
setwd("~/PROJET/PACKAGE_DEEPS_GIT/Rdeepsledge/inst")
setwd("~/")
dat <- read.csv2(files.list(pattern="laser_plu")
dat <- read.csv2(files.list(pattern="laser_plu"))
dat <- read.csv2(list.files(pattern="laser_plu"))
dat <- read.csv2(list.files(pattern="laser_plume"))
dat <- read.csv2(list.files(pattern="laser_"))
dat <- read.csv2(list.files(pattern="laser"))
dat <- read.csv2("laser_position_Plume2022_P2ST16_GOPR_2022-07-18.txt")
dat
dat <- read.csv2("laser_position_Plume2022_P2ST16_GOPR_2022-07-18.txt",sep=",")
dat
dat <- read.csv2("laser_position_Plume2022_P2ST16_GOPR_2022-07-18.txt",sep'/t'
dat <- read.csv2("laser_position_Plume2022_P2ST16_GOPR_2022-07-18.txt",sep='/t')
dat <- read.csv2("laser_position_Plume2022_P2ST16_GOPR_2022-07-18.txt",sep='t/')
dat <- read.csv2("laser_position_Plume2022_P2ST16_GOPR_2022-07-18.txt",sep='\t')
dat
dat <- read.csv("laser_position_Plume2022_P2ST16_GOPR_2022-07-18.txt")
dat
dat <- read.csv("laser_position_Plume2022_P2ST16_GOPR_2022-07-18.txt",sep=" ")
dat
setwd("~/PROJET/PACKAGE_DEEPS_GIT/Rdeepsledge/inst")
save(dat, file = "MPO_REFUGE_source.RData")
file_path <- system.file("MPO_REFUGE_source.Rdata", package = "Rdeepsledge")
exemple <- load(file_path)
# exemple <- load(MPO_REFUGE_source.Rdata)
load("~/PROJET/PACKAGE_DEEPS_GIT/Rdeepsledge/inst/MPO_REFUGE_source.RData")
file_path <- system.file("MPO_REFUGE_source.Rdata", package = "Rdeepsledge")
file_path
setwd("~/PROJET/PACKAGE_DEEPS_GIT/Rdeepsledge/inst")
save(dat, file = "MPO_REFUGE_source.RData")
library(Rdeepsledge)
knitr::opts_chunk$set(echo = TRUE, fig.align="center",warning = FALSE,message = FALSE,error = TRUE)
file_path <- system.file("MPO_REFUGE_source.RData", package = "Rdeepsledge")
library(ggplot2)
library(kableExtra)
library(knitr)
exemple <- load(file_path)
# exemple <- load(MPO_REFUGE_source.Rdata)
setwd("~/PROJET/PACKAGE_DEEPS_GIT/Rdeepsledge/inst")
dat <- load("MPO_REFUGE_source.Rdata")
datt <- load("MPO_REFUGE_source.RData")
datt
load("MPO_REFUGE_source.RData")
dat
library(Rdeepsledge)
knitr::opts_chunk$set(echo = TRUE, fig.align="center",warning = FALSE,message = FALSE,error = TRUE)
file_path <- system.file("MPO_REFUGE_source.RData", package = "Rdeepsledge")
library(ggplot2)
library(kableExtra)
library(knitr)
load(file_path)
# exemple <- dat
library(Rdeepsledge)
knitr::opts_chunk$set(echo = TRUE, fig.align="center",warning = FALSE,message = FALSE,error = TRUE)
file_path <- system.file("MPO_REFUGE_source.RData", package = "Rdeepsledge")
library(ggplot2)
library(kableExtra)
library(knitr)
load(file_path)
exemple <- dat
system.file()
file_path <- system.file("MPO_REFUGE_source.RData", package = "Rdeepsledge")
file_path
setwd(file_path )
setwd(file_path)
file_path <- system.file("MPO_REFUGE_source.RData", package = "Rdeepsledge")
setwd(file_path)
list.files(file_path)
list.files()
remove.packages("Rdeepsledge")
devtools::install_github("FROBIN02/Rdeepsledge")
library(Rdeepsledge)
devtools::install_github("FROBIN02/Rdeepsledge")
devtools::install_github("FROBIN02/Rdeepsledge",force=TRUE)
usethis::use_vignette("ma_vignette.Rmd")
usethis::use_vignette("VIGNETTE.Rmd")
setwd("~/PROJET/PACKAGE_DEEPS_GIT/Rdeepsledge")
usethis::use_vignette("VIGNETTE.Rmd")
usethis::use_vignette("VIGNETTE.Rmd")
usethis::use_vignette("VIGNETTE.Rmd")
usethis::use_vignette("ma_vignette.Rmd")
usethis::use_vignette("vignette.Rmd")
usethis::use_vignette("vignette.Rmd")
Vignette
usethis::use_vignette("vignette.Rmd")
usethis::use_vignette("vignette.Rmd")
setwd("~/PROJET/PACKAGE_DEEPS_GIT/Rdeepsledge")
usethis::use_vignette("vignette.Rmd")
usethis::use_vignette("vignette.Rmd")
usethis::use_vignette("Rdeepsledge.Rmd")
setwd("~/PROJET/PACKAGE_DEEPS_GIT/Rdeepsledge")
usethis::use_vignette("Rdeepsledge.Rmd")
usethis::use_vignette("Rdeepsledge")
devtools::document()
devtools::build_vignettes()
browseVignettes("Rdeepsledge")
RESULTAT <- file.choose ()
RESULT<-RESULTAT
LASER<-list()
ggplot(RESULT,aes(x=X,y=Y))+geom_point()
RESULT$Nframe<-do.call(rbind,strsplit(RESULT$frame,c("_")))[,2]
library(ggplot2)
library(raster)
library(stringi)
LASER<-list()
ggplot(RESULT,aes(x=X,y=Y))+geom_point()
RESULT
RESULT <- read.table(RESULTAT
)
library(ggplot2)
library(raster)
library(stringi)
LASER<-list()
ggplot(RESULT,aes(x=X,y=Y))+geom_point()
RESULT$Nframe<-do.call(rbind,strsplit(RESULT$frame,c("_")))[,2]
RESULT$Nframe<-as.numeric(gsub(".png","",RESULT$Nframe))
RESULT2<-droplevels(subset(RESULT,Nlaser%in%2))
library(dplyr)
RESULT2 %>%
arrange(desc(Nframe),desc(X) ) -> RESULT2
RESULT2$seq<-c(1,2)
maxX<-mean(RESULT2$X[RESULT2$seq==1])
minX  <-  mean(RESULT2$X[RESULT2$seq==2])
mid<- mean(c(minX,maxX))
A<- ggplot(RESULT,aes(y=Nframe,x=Y))+geom_point()
B<- ggplot(RESULT,aes(y=Nframe,x=X))+geom_point()+geom_vline(xintercept = c(maxX,mid,minX))
library(ggpubr)
first<- ggarrange(A,B,ncol=2)
RESULT$laserposition= ifelse(RESULT$X>=mid,"right","left")
RL <-droplevels(subset(RESULT,laserposition%in% "left"))
RL$DISMEAN<- abs(RL$X-minX)
RR <-droplevels(subset(RESULT,laserposition%in% "right"))
RR$DISMEAN<- abs(RR$X -maxX)
statsRR <-  boxplot.stats(RR$DISMEAN)
statsRR <-  statsRR$stats[5]
RR$COL<-ifelse(RR$X>=maxX-statsRR & RR$X<=maxX+statsRR,"green","red")
statsRL <- boxplot.stats(RL$DISMEAN)
statsRL <- statsRL$stats[5]
RL$COL<-ifelse(RL$X>=minX-statsRL & RL$X<=minX+statsRL,"green","red")
RESULT<-rbind(RL,RR)
B<- ggplot(RESULT,aes(y=Nframe,x=X,color=COL))+
geom_point()+geom_vline(xintercept = c(maxX,mid,minX))
A<- ggplot(RESULT,aes(y=Nframe,x=Y,color=COL))+
geom_point()
ggarrange(A,B,ncol=2)
ggplot(RESULT,aes(x=X,y=Y,color=COL))+geom_point()
ggarrange(A,B,ncol=2)
DeepS_find_laser <- function(MP4_file,para,freq) {
freq<-as.numeric(freq)
library(raster)
library(sp)
library(sf)
library(foreach)
library(doParallel)
library(terra)
library(stringi)
library(tictoc)
library(dplyr)
# Créer le répertoire temporaire
temp_dir <- tempfile()
dir.create(temp_dir)
setwd(temp_dir)
videonames <-gsub("\\\\","£",MP4_file)
videonames <-as.vector(stri_split_fixed(videonames,"£") )
videonames<-videonames[[1]][length(as.factor(videonames[[1]]))]
videonames <-as.vector(stri_split_fixed(videonames,".") )[[1]][1]
home_path <- Sys.getenv("HOME")
desktop_path <- file.path(home_path, "Desktop")
# Encodage de la vidéo
av::av_encode_video(MP4_file, output = 'Capture_%5d.png',vfilter = 'null')#, vfilter = 'fps=fps=1')#ici  ok ça marche
# Traitement des images
pic_files <- list.files(pattern=".png")
staat<-c("contrast")
RESULT<-data.frame(matrix(vector(), 0,6 ,dimnames=list(c(), c("X","Y","Nlaser","surface", "frame","origin") )))
for ( i in seq(from =1, to=c(length(levels(as.factor(pic_files)))-40),by=freq)){
setwd(temp_dir)
cat(paste("\n",round(c(i/length(levels(as.factor(pic_files)))*100),1),"% \n ",sep=" "))
sample1<- seq(from=1, to=30,by=5)
raslist <-list()
k=1
raster_glcm<-function(ras){glcm::glcm(ras, window = c(7, 7),
shift=list(c(0,1), c(1,1), c(1,0), c(1,-1)),
statistics = "contrast"
)}
tic()
para = FALSE
if (para==FALSE){
raslist<-list()
k=1
for ( j in sample1) {
setwd(temp_dir)
pic1<- levels(as.factor(pic_files))[i+j]
raslist[[k]] <- raster_glcm(raster::brick(pic1)[[1]])
k=k+1}
results <- raslist}
if (para==TRUE){
cat("paral. on")
raslist<-list()
k=1
for ( j in sample1) {
setwd(temp_dir)
pic1<- levels(as.factor(pic_files))[i+j]
raslist[[k]] <- raster::brick(pic1)[[1]]
k=k+1}
raster_files <- raslist
## Fonction de traitement d'une image
process_raster <- function(ras_file) {
# Charger l'image
ras1<-ras_file
ras_contrast<-raster_glcm(ras1)
# Traitement de l'image (exemple : calculer la moyenne)
# Retourner le résultat
return(ras_contrast)
}
cl <-parallel::makeCluster(detectCores()-2)
doParallel::registerDoParallel(cores = cl)
results <- foreach(ras_file = raster_files) %dopar% {
raster_glcm<-function(ras){glcm::glcm(ras, window = c(7, 7),
shift=list(c(0,1), c(1,1), c(1,0), c(1,-1)),
statistics = "contrast"
)}
process_raster(ras_file)
}
gc(); stopCluster(cl)
}
toc()
results_df <- do.call(stack, results)
plot(results_df)
cumul_res<-results_df[[1]]
rr<-getValues(results_df)
# rr<-ifelse(rr<=5,0,1)
# values(results_df)<-rr
# # x11();plot(b)
rr[rr==0]<-NA
#  rr[is.na(rr)]<-0
#  # rr[rr>0]<-1
# is.na(rr[rr==0])
values(cumul_res)<-rowSums(rr,na.rm = FALSE)
rr<-getValues(cumul_res)
rr[rr<=max(rr,na.rm=T)*2/3]<-NA
rr[rr>0]<-1
values(cumul_res)<-rr
rr[is.na(rr)]<-0
stop_to_next<-max(rr)==0
regions_to_polygons <- function(region_raster) {
polygons <- rasterToPolygons(region_raster, dissolve = TRUE)
return(polygons)
}
if(stop_to_next==FALSE){
glcm.red5<-regions_to_polygons(cumul_res)
glcm.red5 <-st_as_sf(glcm.red5)
glcmbuf<-st_buffer(glcm.red5, dist=3)
# test<-raster::buffer(glcm.red5, width=3)
# plot(test)
merged_polygons <- st_as_sf(glcmbuf)
df_union_cast <- st_cast(merged_polygons, "POLYGON")
df_union_cast <- df_union_cast %>%     mutate(surface = st_area(.))
centros <- df_union_cast %>%  st_centroid() %>% st_coordinates()
result1<-as.data.frame(centros)
result1$Nlaser<-dim(result1)[1]
result1$surface<-df_union_cast$surface
result1$frame<-pic1
result1$origin<-MP4_file
cat( paste(dim(result1)[1], "  points...\n",sep=""))
RESULT<-rbind(RESULT,result1)
names(RESULT)<-c("X","Y","Nlaser","surface", "frame","origin")
setwd(home_path)
write.table(RESULT,paste("laser_position_",videonames,".txt",sep=""))
}
if(stop_to_next==TRUE) {
X<-NA
Y<-NA
Nlaser<-0
result1$surface<-NA
frame<-pic1
origin<-MP4_file
cat(" pas de points...\n")
result1<-c(X,Y,frame,origin,Nlaser)
RESULT<-rbind(RESULT,result1)
names(RESULT)<-c("X","Y","Nlaser","surface", "frame","origin")
setwd(home_path)
write.table(RESULT,paste("laser_position_",videonames,".txt",sep=""))
}
#/////////////////////////////////////////////////////////////////////////////////
}
# Nettoyage
setwd(temp_dir)
unlink(temp_dir, recursive = TRUE)
return(RESULT)
}
DeepS_find_laser <- function(MP4_file,para,freq) {
freq<-as.numeric(freq)
library(raster)
library(sp)
library(sf)
library(foreach)
library(doParallel)
library(terra)
library(stringi)
library(tictoc)
library(dplyr)
# Créer le répertoire temporaire
temp_dir <- tempfile()
dir.create(temp_dir)
setwd(temp_dir)
videonames <-gsub("\\\\","£",MP4_file)
videonames <-as.vector(stri_split_fixed(videonames,"£") )
videonames<-videonames[[1]][length(as.factor(videonames[[1]]))]
videonames <-as.vector(stri_split_fixed(videonames,".") )[[1]][1]
home_path <- Sys.getenv("HOME")
desktop_path <- file.path(home_path, "Desktop")
# Encodage de la vidéo
av::av_encode_video(MP4_file, output = 'Capture_%5d.png',vfilter = 'null')#, vfilter = 'fps=fps=1')#ici  ok ça marche
# Traitement des images
pic_files <- list.files(pattern=".png")
staat<-c("contrast")
RESULT<-data.frame(matrix(vector(), 0,6 ,dimnames=list(c(), c("X","Y","Nlaser","surface", "frame","origin") )))
for ( i in seq(from =1, to=c(length(levels(as.factor(pic_files)))-40),by=freq)){
setwd(temp_dir)
cat(paste("\n",round(c(i/length(levels(as.factor(pic_files)))*100),1),"% \n ",sep=" "))
sample1<- seq(from=1, to=30,by=5)
raslist <-list()
k=1
raster_glcm<-function(ras){glcm::glcm(ras, window = c(7, 7),
shift=list(c(0,1), c(1,1), c(1,0), c(1,-1)),
statistics = "contrast"
)}
tic()
para = FALSE
if (para==FALSE){
raslist<-list()
k=1
for ( j in sample1) {
setwd(temp_dir)
pic1<- levels(as.factor(pic_files))[i+j]
raslist[[k]] <- raster_glcm(raster::brick(pic1)[[1]])
k=k+1}
results <- raslist}
if (para==TRUE){
cat("paral. on")
raslist<-list()
k=1
for ( j in sample1) {
setwd(temp_dir)
pic1<- levels(as.factor(pic_files))[i+j]
raslist[[k]] <- raster::brick(pic1)[[1]]
k=k+1}
raster_files <- raslist
## Fonction de traitement d'une image
process_raster <- function(ras_file) {
# Charger l'image
ras1<-ras_file
ras_contrast<-raster_glcm(ras1)
# Traitement de l'image (exemple : calculer la moyenne)
# Retourner le résultat
return(ras_contrast)
}
cl <-parallel::makeCluster(detectCores()-2)
doParallel::registerDoParallel(cores = cl)
results <- foreach(ras_file = raster_files) %dopar% {
raster_glcm<-function(ras){glcm::glcm(ras, window = c(7, 7),
shift=list(c(0,1), c(1,1), c(1,0), c(1,-1)),
statistics = "contrast"
)}
process_raster(ras_file)
}
gc(); stopCluster(cl)
}
toc()
results_df <- do.call(stack, results)
# plot(results_df)
cumul_res<-results_df[[1]]
rr<-getValues(results_df)
# rr<-ifelse(rr<=5,0,1)
# values(results_df)<-rr
# # x11();plot(b)
rr[rr==0]<-NA
#  rr[is.na(rr)]<-0
#  # rr[rr>0]<-1
# is.na(rr[rr==0])
values(cumul_res)<-rowSums(rr,na.rm = FALSE)
rr<-getValues(cumul_res)
rr[rr<=max(rr,na.rm=T)*2/3]<-NA
rr[rr>0]<-1
values(cumul_res)<-rr
rr[is.na(rr)]<-0
stop_to_next<-max(rr)==0
# dev.off()
regions_to_polygons <- function(region_raster) {
polygons <- rasterToPolygons(region_raster, dissolve = TRUE)
return(polygons)
}
if(stop_to_next==FALSE){
glcm.red5<-regions_to_polygons(cumul_res)
glcm.red5 <-st_as_sf(glcm.red5)
glcmbuf<-st_buffer(glcm.red5, dist=3)
# test<-raster::buffer(glcm.red5, width=3)
# plot(test)
merged_polygons <- st_as_sf(glcmbuf)
df_union_cast <- st_cast(merged_polygons, "POLYGON")
df_union_cast <- df_union_cast %>%     mutate(surface = st_area(.))
centros <- df_union_cast %>%  st_centroid() %>% st_coordinates()
result1<-as.data.frame(centros)
result1$Nlaser<-dim(result1)[1]
result1$surface<-df_union_cast$surface
result1$frame<-pic1
result1$origin<-MP4_file
cat( paste(dim(result1)[1], "  points...\n",sep=""))
RESULT<-rbind(RESULT,result1)
names(RESULT)<-c("X","Y","Nlaser","surface", "frame","origin")
setwd(home_path)
write.table(RESULT,paste("laser_position_",videonames,".txt",sep=""))
}
if(stop_to_next==TRUE) {
X<-NA
Y<-NA
Nlaser<-0
result1$surface<-NA
frame<-pic1
origin<-MP4_file
cat(" pas de points...\n")
result1<-c(X,Y,frame,origin,Nlaser)
RESULT<-rbind(RESULT,result1)
names(RESULT)<-c("X","Y","Nlaser","surface", "frame","origin")
setwd(home_path)
write.table(RESULT,paste("laser_position_",videonames,".txt",sep=""))
}
#/////////////////////////////////////////////////////////////////////////////////
}
# Nettoyage
setwd(temp_dir)
unlink(temp_dir, recursive = TRUE)
return(RESULT)
}
library(Rdeepsledge)
knitr::opts_chunk$set(echo = TRUE, fig.align="center",warning = FALSE,message = FALSE,error = TRUE)
file_path <- system.file("MPO_REFUGE_source.RData", package = "Rdeepsledge")
library(ggplot2)
library(kableExtra)
library(knitr)
load(file_path)
exemple <- dat
library(Rdeepsledge)
MP4_file <- file.choose ()
RESULT<- DeepS_find_laser(MP4_file,FALSE,10)
RESULT
mylaser <- DeepS_correct_laser(RESULT)
mylaser
